using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Project_Euler
{
    class Problems
    {
        /*Multiples of 3 and 5
          Problem 1
            If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
            Find the sum of all the multiples of 3 or 5 below 1000.*/

        public void MultiplesOfXandY(int x, int y, int limit)
        {
            int sum = 0;
            for (int i = 1; i < limit; ++i)
            {
                if (i % x == 0)
                {
                    sum += i;
                }
                else if (i % y == 0)
                {
                    sum += i;
                }
            }

            Console.WriteLine("The sum of all the multiples of {0} or {1} below {2}: {3}",x,y,limit,sum);
        }

        /*Even Fibonacci numbers
            Problem 2
                Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
                By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        */

        public void FibonacciNumber(int limit)
        {
            int sum = 0;
            List<int> numbers = new List<int>(new int[] { 1,2});

            for (int i = 2; i < limit; ++i)
            {
                numbers.Add(numbers[i-1] + numbers[i - 2]);
               
            }

            foreach (var item in numbers)
            {
                sum += item;
                //Console.Write(item + " ");
            }
            //Console.WriteLine(Environment.NewLine);
            Console.WriteLine("Sum of the fibonacci numbers below {0}: {1}", limit, sum);
        }

        /*
        Largest prime factor
            Problem 3
                The prime factors of 13195 are 5, 7, 13 and 29.
                What is the largest prime factor of the number 600851475143 ?
        */

        public void LargestPrimeFactor(long x)
        {
            long i = 2L;
            int test = 0;

            while (x > 1)
            {
                while (x % i == 0)
                {
                    x /= i;
                }

                i++;

                if (i * i > x && x > 1)
                {
                    Console.WriteLine("The largest prime factor: {0}", x); //prints n if it's prime
                    test = 1;
                    break;
                }
            }

            if (test == 0)
                Console.WriteLine(i - 1); //prints n if it's the largest prime factor

        }


        /*Largest palindrome product
            Problem 4
                A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
                Find the largest palindrome made from the product of two 3-digit numbers.
        */

        public void LargestPalindrome(int numberOfDigits)
        {
            List<string> pairs = new List<string>();

            int lowerBound = (int)Math.Pow(10, numberOfDigits - 1);

            for (int i = (int)Math.Pow(10, numberOfDigits) - 1;  i > lowerBound ;--i)
            {
                for (int j = (int)Math.Pow(10, numberOfDigits) - 1; j > lowerBound  ; --j)
                {
                    if (IsPalindrome(i * j))
                    {
                        pairs.Add(i + "," + j);
                    }
                    
                }
            }

            int largestX = 0;
            int largestY = 0;
            //Fint the largest pair
            foreach (var item in pairs)
            {
                string[] numbers = item.Split(',');
                
                if ((int.Parse(numbers[0]) * int.Parse(numbers[1])) > (largestX * largestY))
                {
                    largestX = int.Parse(numbers[0]);
                    largestY = int.Parse(numbers[1]);
                } 
            }

            Console.WriteLine("x: {0} y: {1}", largestX, largestY);
        }

        

        /*
        Helper method to check that is the number palindrome
        */

        private bool IsPalindrome(int x)
        {
            string number= x.ToString();
            char[] tmp = number.ToCharArray();
            Array.Reverse(tmp);

            string reverseNumber = new string(tmp);
            

            if (number == reverseNumber)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        public void Primes(int x)
        {
            bool[] arrayOfPrimes = new bool[x+1];


            //init
            for (long i = 2; i < x; ++i)
            {
                arrayOfPrimes[i] = true;
            }
            //End of init


            for (long i = 2; i * i <= x; ++i)
            {
                if (arrayOfPrimes[i])
                {
                    for (long j = i * i; j <= x; j+=i)
                    {
                        arrayOfPrimes[j] = false;
                    }
                }
            }

            for (long i = 0; i <= x; ++i)
            {
                if (arrayOfPrimes[i])
                {
                    Console.Write(i + " ");
                }
            }

        }

    }
}
